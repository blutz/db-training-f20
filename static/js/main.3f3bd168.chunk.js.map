{"version":3,"sources":["CodeChallenge.module.css","Home.js","CodeDemo.js","CodeChallenge.js","HTMLPage.js","CSSPage.js","JSPage.js","App.js","reportWebVitals.js","index.js","CodeDemo.module.css"],"names":["module","exports","Home","href","getCircularReplacer","seen","WeakSet","key","value","has","add","combineHtmlPart","code","htmlPart","CodeDemo","initialCode","editable","mode","delayedRun","useState","setCode","runCode","setRunCodeRaw","jsReturn","setJsReturn","setRunCode","useCallback","useEffect","modeArg","className","styles","wrapper","editorContainer","onKeyDown","e","ctrlKey","metaKey","keyCode","title","editor","onBeforeChange","_","__","options","theme","lineNumbers","lineWrapping","runButton","onClick","resultContainer","srcDoc","resultHidden","onLoad","target","contentWindow","myFunction","JSON","stringify","result","CodeChallenge","description","descriptionImg","hint","solution","solutionDescription","solutionShown","setSolutionShown","style","container","display","flex","maxWidth","src","alt","HTMLPage","process","rel","CSSPage","JSPage","App","exact","to","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3f3bd168.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"CodeChallenge_container__OrRtk\"};","import React from 'react'\n\nfunction Home() {\n  return <div>\n    <h2>Slides</h2>\n    <p>Navigate the non-Google slides with the arrows in the corner or the arrow keys on your keyboard</p>\n    <ul>\n      <li><a href='/slides/intro.html'>Intro/Journalism</a></li>\n      <li><a href='/slides/html.html'>HTML</a></li>\n      <li><a href='/slides/css.html'>CSS</a></li>\n      <li><a href='https://docs.google.com/presentation/d/1sjXNHiMxkigvD12SvLz6XNOe89u5Y4BbFOCHJoAaK_M/edit?usp=sharing'>Git</a></li>\n      <li><a href='https://docs.google.com/presentation/d/1iOlrF8uuqd06nXTuriemlNTDcuYkdnNVvwmXkSNNiPU/edit?usp=sharing'>React</a></li>\n      <li><a href='https://docs.google.com/presentation/d/1wAgQ8YmcqFo9qwysK-m-5lZ8Dcikn32vo0ouuObMRxs/edit?usp=sharing'>REST APIs</a></li>\n    </ul>\n  </div>\n}\n\nexport default Home\n","import React, { useState, useEffect, useCallback, Fragment } from 'react'\nimport { Controlled as CodeMirror } from 'react-codemirror2'\nimport styles from './CodeDemo.module.css'\nimport 'codemirror/mode/htmlmixed/htmlmixed'\nimport 'codemirror/mode/javascript/javascript'\nimport 'codemirror/lib/codemirror.css'\nimport 'codemirror/theme/dracula.css'\n\n// From MDN. Fixes JSON.stringify so we can use it with circular references\nconst getCircularReplacer = () => {\n  const seen = new WeakSet()\n  return (key, value) => {\n    if (typeof value === \"object\" && value !== null) {\n      if (seen.has(value)) {\n        return\n      }\n      seen.add(value)\n    }\n    return value\n  }\n}\n\nfunction combineHtmlPart(code, htmlPart) {\n  if(!htmlPart) { return code }\n  return htmlPart + '<script>' + code + '</script>'\n}\n\nfunction CodeDemo({initialCode, editable=true, mode='html', htmlPart}) {\n  const delayedRun = (mode === 'js' || mode === 'jsdom')\n  const [code, setCode] = useState(initialCode || '')\n  const [runCode, setRunCodeRaw] = useState(combineHtmlPart(code, htmlPart))\n  const [jsReturn, setJsReturn] = useState('')\n  const setRunCode = useCallback((code) => {\n    setRunCodeRaw(combineHtmlPart(code, htmlPart))\n  }, [setRunCodeRaw, htmlPart])\n  useEffect(() => {\n    if(!delayedRun) { setRunCode(code) }\n  }, [code, delayedRun, setRunCode])\n\n  let modeArg = 'htmlmixed'\n  if(mode === 'js' || mode === 'jsdom') { modeArg = 'javascript' }\n\n  function handleKeyCombo(e) {\n    if((e.ctrlKey || e.metaKey) && e.keyCode === 13) {\n      setRunCode(code)\n    }\n  }\n\n  return <div className={styles.wrapper}>\n    <div className={styles.editorContainer} onKeyDown={handleKeyCombo}>\n      <div className={styles.title}>Editor</div>\n      <CodeMirror\n        className={styles.editor}\n        value={code}\n        onBeforeChange={(_, __, value) => {\n          if(editable) { setCode(value) }\n        }}\n        options={{\n          mode: modeArg,\n          theme: 'dracula',\n          lineNumbers: true,\n          lineWrapping: true,\n        }}\n      />\n    </div>\n\n    {delayedRun && editable && <button\n      className={styles.runButton}\n      onClick={() => setRunCode(code)}>\n        Run ▶️\n    </button> }\n\n    <div className={styles.resultContainer}>\n      <div className={styles.title}>Output/Return</div>\n      {mode === 'js' ?\n        <Fragment>\n          <iframe srcDoc={`<script>\n              window.myFunction = () => { ${runCode} }\n            </script>`}\n            title='result'\n            className={styles.resultHidden}\n            onLoad={(e) => {\n              e.target.contentWindow.myFunction &&\n              setJsReturn(e.target.contentWindow.myFunction())\n            }}\n          ></iframe>\n          <div className={styles.jsReturn}>\n            {JSON.stringify(jsReturn, getCircularReplacer())}\n          </div>\n        </Fragment>\n      :\n        <iframe srcDoc={runCode} title='result' className={styles.result}></iframe>\n      }\n    </div>\n  </div>\n}\n\nexport default CodeDemo\n","import React, { useState } from 'react'\nimport ReactSpoiler from 'react-spoiler'\nimport CodeDemo from './CodeDemo'\nimport style from './CodeChallenge.module.css'\n\nfunction CodeChallenge({title, description, descriptionImg, hint, initialCode, solution, solutionDescription, htmlPart, mode='html'}) {\n  const [solutionShown, setSolutionShown] = useState(false)\n  return <section className={style.container}>\n    <h3>{title}</h3>\n    <div style={{display: 'flex'}}>\n      <p style={{flex: 1}}>{description}</p>\n      {descriptionImg && <div style={{flex: 0.5, maxWidth: '50%'}}>\n        <img src={descriptionImg} alt='Sample' style={{maxWidth: '100%'}} />\n      </div>}\n    </div>\n    {hint && <div><strong>Hint:</strong>&nbsp;\n      <ReactSpoiler className='spoiler'>{hint}</ReactSpoiler>\n    </div>}\n    {htmlPart && <div><strong>HTML:</strong>\n      <pre>{htmlPart}</pre>\n    </div>}\n    <CodeDemo initialCode={initialCode || ''} mode={mode} htmlPart={htmlPart} />\n    <button onClick={() => setSolutionShown(!solutionShown)}>{solutionShown ? 'Hide' : 'Show'} sample solution</button>\n    {solutionShown && <div>\n      <CodeDemo initialCode={solution} editable={false} mode={mode} htmlPart={htmlPart} />\n      <p>{solutionDescription}</p>\n    </div>}\n  </section>\n}\n\nexport default CodeChallenge\n","import React, { Fragment } from 'react'\nimport CodeChallenge from './CodeChallenge'\n\nfunction HTMLPage() {\n  return <Fragment>\n    <h2>HTML Exercises</h2>\n    <CodeChallenge\n      title='1: Link to a new tab'\n      description='Make a link to the Daily Bruin homepage that opens in a new tab (and is secure!)'\n      hint={<Fragment>Remember to use <code>noopener</code> and <code>noreferrer</code></Fragment>}\n      solution={`<a href='https://dailybruin.com' target='_blank' rel='noopener noreferrer'>Go to Daily Bruin</a>`}\n      solutionDescription={<Fragment><code>target='_blank'</code> means open the link in a new tab. <code>rel='noopener noreferrer'</code> makes sure that the website, in this case dailybruin.com, cannot gain access or control this page.</Fragment>}\n    />\n\n\n    <CodeChallenge\n      title='2: Page skeleton'\n      description='Write out the basic page skeleton for any HTML5 page'\n      hint='Be sure to include doctype, title, and charset'\n      solution={`<!doctype html>\n<html>\n<head>\n  <meta charset='utf-8'>\n  <title>Page title goes here</title>\n</head>\n<body>\n  Content goes here\n</body>\n</html>\n`}\n    />\n\n    <CodeChallenge\n      title='3: News article'\n      description='As shown in the image, make a news article with a title, image, byline, and a paragraph. You can grab text/images from dailybruin.com'\n      descriptionImg={`${process.env.PUBLIC_URL}/img/news-article-demo.jpg`}\n      solution={`<h1>In-person instructors experience excitement, hesitation ahead of return to campus</h1>\n<img src='https://wp.dailybruin.com/images/2020/09/web.news_.inpersoncourses.CQ_.Benny_.jpg' alt='mask photo illustration' width='200'/>\n<p><strong>By Bobby Hekel</strong></p>\n<p>Darah Wilson said she is prepared for the fall and what it entails for her: being one of the first instructors at UCLA to return to in-person instruction.</p>`}\n    />\n\n    <CodeChallenge\n      title='4: Headings'\n      description='Make consecutive headings 1-6 with a horizontal rule through each one. Link h1 to DailyBruin.com'\n      solution={`<h1><a href='https://dailybruin.com'>Heading 1</a></h1>\n<hr />\n<h2>Heading 2</h2>\n<hr />\n<h3>Heading 3</h3>\n<hr />\n<h4>Heading 4</h4>\n<hr />\n<h5>Heading 5</h5>\n<hr />\n<h6>Heading 6</h6>`}\n    />\n\n    <CodeChallenge\n      title='5: Lists'\n      description='Make a REVERSED ordered list with links to your top 5 favorite websites. Highlight your number one website'\n      hint={<Fragment>You may need to use <a href='https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ol' target='_blank' rel='noopener noreferrer'>the MDN reference for <code>ol</code></a> to find how to reverse a list</Fragment>}\n      solution={`<ol reversed>\n  <li><a href='https://www.unicamp.org'>UCLA UniCamp</a></li>\n  <li><a href='https://ucla.edu'>UCLA</a></li>\n  <li><a href='https://wikipedia.org'>Wikipedia</a></li>\n  <li><a href='https://developer.mozilla.org/en-US/'>MDN Web Docs</a></li>\n  <li><mark><a href='https://dailybruin.com'>Daily Bruin</a></mark></li>\n</ol>`}\n    />\n\n    <CodeChallenge\n      title='6: Favorite quote'\n      description={<Fragment>Use <code>blockquote</code> and <code>footer</code> tags to write your favorite quote with a citation of who said it.</Fragment>}\n      hint={`We didn't talk about these tags, so search Google for \"mdn blockquote\" and \"mdn footer\" to learn about them. All the info you need for this is on MDN's <blockquote> tag page`}\n      solution={`<p>Favorite quote:</p>\n<blockquote>\n  <p>Were it left to me to decide whether we should have a government without newspapers, or newspapers without a government, I should not hesitate a moment to prefer the latter.</p>\n  <footer>—Benjamin Franklin</footer>\n</blockquote>`}\n    />\n\n  </Fragment>\n}\n\nexport default HTMLPage\n","import React, { Fragment } from 'react'\nimport CodeChallenge from './CodeChallenge'\n\nfunction CSSPage() {\n  return <Fragment>\n    <h2>CSS Exercises</h2>\n    <p>In these, add CSS styles to match the example image</p>\n    <CodeChallenge\n      title='1: Text styling'\n      descriptionImg='/img/css1.jpg'\n      hint={`On PCs, the font is \"Comic Sans\" but on other platforms it's \"Comic Sans MS\". How can you make sure the correct font is displayed on all computers?`}\n      initialCode={`<style>\n\n</style>\n\n<p>Undergraduate Students Association Council Facilities Commission and Financial Supports Commission partnered with the Westwood Village Improvement Association to create the coupon code, “ILOVEWESTWOOD,” announced via social media on Oct 13. Customers can use the code in person or via phone.</p>\n<p>Twelve restaurants, including Sweetfin Poke, Nick the Greek and Pinches Tacos have signed onto the initiative so far to offer discounts to UCLA students and faculty. Students can get 20% off orders at Tocaya Organica and $0.99 fish tacos from Baja California Tacos on Wednesdays.</p>\n<p>USAC Facilities Commissioner Sachi Cooper said USAC created the coupons to make food more affordable to the UCLA community during a difficult financial time. FAC promoted the discounts on social media, designed graphics for the coupons and flyers and published ads on Twitter and Instagram.</p>\n<p>The coupon codes will also benefit the many struggling businesses in the Village, said Cooper, a third-year geography student.</p>`}\n      solution={`<style>\n  p {\n    font-family: 'Comic Sans', 'Comic Sans MS', sans-serif;\n    font-weight: bold;\n    text-align: right;\n    color: green;\n    line-height: 2rem;\n    text-decoration: underline;\n    font-size: 1.2rem;\n    font-style: italic;\n    text-shadow: 0 2px 3px red;\n  }\n</style>\n\n<p>Undergraduate Students Association Council Facilities Commission and Financial Supports Commission partnered with the Westwood Village Improvement Association to create the coupon code, “ILOVEWESTWOOD,” announced via social media on Oct 13. Customers can use the code in person or via phone.</p>\n<p>Twelve restaurants, including Sweetfin Poke, Nick the Greek and Pinches Tacos have signed onto the initiative so far to offer discounts to UCLA students and faculty. Students can get 20% off orders at Tocaya Organica and $0.99 fish tacos from Baja California Tacos on Wednesdays.</p>\n<p>USAC Facilities Commissioner Sachi Cooper said USAC created the coupons to make food more affordable to the UCLA community during a difficult financial time. FAC promoted the discounts on social media, designed graphics for the coupons and flyers and published ads on Twitter and Instagram.</p>\n<p>The coupon codes will also benefit the many struggling businesses in the Village, said Cooper, a third-year geography student.</p>`}\n    />\n\n    <CodeChallenge\n      title='2: Block styling'\n      description='Make sure there is no horizontal (or vertical) scroll within the pane, but the box should be full width'\n      hint='Remember, box-sizing is your friend. Look up box-shadow on MDN and look for \"inset\". Look up \"border-radius\" on MDN'\n      descriptionImg='/img/css2.jpg'\n      initialCode={`<style>\n</style>\n\n<div>This is my content</div>`}\n      solution={`<style>\ndiv {\n  width: 100%;\n  background-color: pink;\n  padding: 100px 0 0 50px;\n  box-sizing: border-box;\n  color: purple;\n  box-shadow: 0 0 8px rgba(0,0,0,0.5) inset;\n  border-radius: 20px;\n}\n</style>\n\n<div>This is my content</div>`}\n\n    />\n  </Fragment>\n}\n\nexport default CSSPage\n","import React, { Fragment } from 'react'\nimport CodeChallenge from './CodeChallenge'\n\nfunction JSPage() {\n  return <Fragment>\n    <h2>Javascript Exercises</h2>\n    <p>Click \"run\" or cmd/ctrl+enter to run your code. Right-click (anywhere on this page) > Inspect to access the Chrome Dev Tools and see your <code>console.log</code> messages.</p>\n\n    <CodeChallenge\n      title='1: Strings &amp; Arrays'\n      description='Without modifying this array, return the string: \"The winning lottery numbers are: 1, 2, 3, 4\". Use string interpolation.'\n      hint=\"You should only need two total lines of code. Use backticks for string interpolation and .join for the array\"\n      initialCode={`const lotteryNumbers = [1, 2, 3, 4]\n\nreturn 'Your return value here'`}\n      mode='js'\n      solution={\"const lotteryNumbers = [1, 2, 3, 4]\\n\\n\"+\n\"return `The winning lottery numbers are: ${lotteryNumbers.join(', ')}.`\"}\n    />\n\n    <CodeChallenge\n      title='2: String transformation'\n      description={<Fragment>Without modifying the first line, convert this string to the array <code>[\"THIS\", \"IS\", \"MY\", \"SAMPLE\", \"STRING\"]</code></Fragment>}\n      mode='js'\n      initialCode={`const mystr = '   this is my sample string   '\n\nreturn 'Your return value here'`}\n      solution={`const mystr = '   this is my sample string   '\n\nreturn mystr.toUpperCase().trim().split(' ')`}\n    />\n\n    <CodeChallenge\n      title='3: Harder string transformation'\n      description={<Fragment>Without modifying the first line, convert this string to the array <code>[\"THIS\", \"IS\", \"MY\", \"SAMPLE\", \"STRING\"]</code></Fragment>}\n      hint='Look up array.filter on MDN. Feel free to come back to this one at the end'\n      mode='js'\n      initialCode={`const mystr = '   this     is  my          sample string   '\n\nreturn 'Your return value here'`}\n      solution={`const mystr = '   this is my sample string   '\n\nreturn mystr.toUpperCase().split(' ').filter(el => el.length)`}\n    />\n\n    <CodeChallenge\n      title='4: Searching through strings'\n      description=\"Fill in the function that will return true for any string that contains 'bruin' (case-insensitive). The return statement will return 'true' when it is correct. Don't modify the return statement!\"\n      mode='js'\n      initialCode={`function hasBruin(str) {\n  // Your code here. Return true or false\n}\n\nreturn hasBruin('I am a bruin') && hasBruin('I am a bRuIn') && !hasBruin('BR  UIN') && !hasBruin('I am not a trojan')`}\n      solution={`function hasBruin(str) {\n  return str.toLowerCase().includes('bruin')\n}\n\nreturn hasBruin('I am a bruin') && hasBruin('I am a bRuIn') && !hasBruin('BR  UIN') && !hasBruin('I am not a trojan')`}\n    />\n\n    <CodeChallenge\n      title='5: Sorting an array'\n      description=\"Sort this array. Expected output: ['a', 'b', 'c', 'd', 'e']\"\n      mode='js'\n      hint=\"Don't write your own sort algorithm. Use array.sort()\"\n      initialCode={`const myArray = ['d', 'e', 'a', 'b', 'c']\n\nreturn 'Your return value here'`}\n      solution={`const myArray = ['d', 'e', 'a', 'b', 'c']\n\nreturn myArray.sort()`}\n    />\n\n    <CodeChallenge\n      title='6: Sorting another array'\n      description=\"Only using .sort(), sort this array, case-insensitively. Expected output: ['A', 'b', 'C', 'd', 'E']\"\n      mode='js'\n      hint=\".sort() takes a 'compare function' as an argument. Look up the MDN docs for it and pay special attention to the values that the compare function needs to return. Come back to this one if you are stuck.\"\n      initialCode={`const myArray = ['d', 'E', 'A', 'b', 'C']\n\nreturn 'Your return value here'`}\n      solution={`const myArray = ['d', 'E', 'A', 'b', 'C']\n\nreturn myArray.sort((first, second) => {\n  const a = first.toLowerCase()\n  const b = second.toLowerCase()\n  if(a < b) { return -1 }\n  else if (b < a) { return 1 }\n  return 0\n})`}\n    />\n\n    <CodeChallenge\n      title='7: Multiplying an array'\n      description='Complete this function that takes in an array and multiplies every element by 2 into a new array. Expected output from the return statement: [2, 4, 6, 8, 10]'\n      hint='Use the array.map() function'\n      mode='js'\n      initialCode={`const double = (arr) => {\n  // Your code here...\n}\n\nreturn double([1, 2, 3, 4, 5])`}\n      solution={`const double = (arr) => {\n  return arr.map(el => el*2)\n}\n\nreturn double([1, 2, 3, 4, 5])`}\n    />\n\n    <h3><mark>DOM-specific exercises</mark></h3>\n    <p>From here out, the code on the left side will run on the HTML specified above. The right pane shows the HTML preview.</p>\n    <p>Right-click in the preview pane and click inspect to launch dev tools for that iframe.</p>\n\n\n    <CodeChallenge\n      title='8: Horizontal Rules'\n      description='Delete all the <hr> tags from the page.'\n      initialCode='// Your code here. No need for a return statement.'\n      hint='HTML elements have a .remove() method that will remove them from the DOM'\n      mode='jsdom'\n      solution={`const nodes = document.querySelectorAll('hr')\nfor (node of nodes) {\n  node.remove()\n}`}\n      htmlPart={`\n<hr>\n<h1>Help</h1>\n<hr>\n<hr>\n<hr>\n<p>We've been taken over by</p>\n<hr>\n<hr>\n<p>horizontal rules!</p>\n<hr>\n<hr>\n      `}\n    />\n\n    <CodeChallenge\n      title='9: Add a class'\n      description='Add the \"huge\" class to the SECOND (and only the second) paragraph'\n      initialCode='// Your code here. No need for a return statement.'\n      mode='jsdom'\n      solution={`document.querySelectorAll('p')[1].classList = 'huge'`}\n      htmlPart={`\n<style>.huge { font-size: 2em; color: green; font-weight: bold; }</style>\n<p>This is the first paragraph</p>\n<p>This is the second paragraph</p>\n<p>This is the third paragraph</p>\n      `}\n    />\n\n    <CodeChallenge\n      title='10: Alert!'\n      description='Make this button pop up an alert that says \"Hello World\" when it is clicked. Select the button by id.'\n      hint='You can send an alert by calling window.alert(). You can attack a click handler by setting the .onclick property of an element.'\n      initialCode='// Your code here. No need for a return statement.'\n      mode='jsdom'\n      solution={`document.getElementById('myButton').onclick = () =>\n\twindow.alert('Hello World')`}\n      htmlPart={`<button id='myButton'>Click me!</button>`}\n    />\n\n    <CodeChallenge\n      title=\"11: What's my IP?\"\n      description={<Fragment>Display the current user's IP address in the placeholder div#myip and remove the loading class. You can get the IP address from a web service at <code>//api.ipify.org?format=json</code>. <em>Note: you may need to disable your ad blocker for this to work</em></Fragment>}\n      hint=\"Use fetch, try/catch, and .textContent. This is more complicated than the rest of the exercises, so we'll go over this one together.\"\n      mode='jsdom'\n      initialCode={`(async () => {\n  // This is an immediately invoked async function\n  // so you can use async/await here.\n})()`}\n      solution={`(async () => {\n  let newText\n  try {\n    const resp = await fetch('//api.ipify.org?format=json')\n    const obj = await resp.json()\n    newText = obj.ip\n  } catch (e) {\n    console.error(e)\n    newText = 'Error retrieving your IP address'\n  }\n\n  const container = document.getElementById('myip')\n  container.classList = ''\n  // innerHTML would be dangerous here. Use textContent instead.\n  container.textContent = newText\n})()`}\n      htmlPart={`\n<style>.loading { opacity: 0.2; } </style>\n<h1>Your IP address is: <span id='myip' class='loading'>loading...</span></h1>\n      `}\n    />\n\n\n\n  </Fragment>\n}\n\nexport default JSPage\n","import './App.css'\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n  NavLink\n} from \"react-router-dom\"\nimport Home from './Home'\nimport HTMLPage from './HTMLPage'\nimport CSSPage from './CSSPage'\nimport JSPage from './JSPage'\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <nav>\n          <h1>Daily Bruin Online Training <em>Winter 2022</em></h1>\n          <h2>Exercises</h2>\n          <ul>\n            <li><NavLink exact={true} to='/'>Home</NavLink></li>\n            <li><NavLink to='/html'>HTML (optional)</NavLink></li>\n            <li><NavLink to='/css'>CSS (optional)</NavLink></li>\n            <li><NavLink to='/js'>Javascript</NavLink></li>\n          </ul>\n        </nav>\n        <Switch>\n          <Route path='/html'>\n            <HTMLPage />\n          </Route>\n          <Route path='/css'>\n            <CSSPage />\n          </Route>\n          <Route path='/js'>\n            <JSPage />\n          </Route>\n          <Route path='/'>\n            <Home />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"CodeDemo_wrapper__C_Lnz\",\"editorContainer\":\"CodeDemo_editorContainer__p9uO-\",\"resultContainer\":\"CodeDemo_resultContainer__2W-ru\",\"result\":\"CodeDemo_result__EJmH6\",\"title\":\"CodeDemo_title__38h0H\",\"resultHidden\":\"CodeDemo_resultHidden__qtHMC\",\"jsReturn\":\"CodeDemo_jsReturn__2Rp9s\",\"runButton\":\"CodeDemo_runButton__1fkGj\"};"],"sourceRoot":""}